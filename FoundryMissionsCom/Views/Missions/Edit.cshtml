@model FoundryMissionsCom.Models.FoundryMissionViewModels.EditMissionViewModel

@{
    ViewBag.Title = "Edit Mission";
    var counter = 0;
}

@section opengraph{

    <meta property="og:title" content="Edit Mission"/>

    }




@using (Html.BeginForm("edit", "missions", FormMethod.Post, new { @class = "missiondata" }))
{
    @Html.AntiForgeryToken()

    <h2>Editing @Model.Name</h2>
    <hr />
    <div class="form-vertical">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">                    
                    @Html.LabelFor(model => model.CrypticId, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group">
                        <span class="input-group-addon">ST-</span>
                        @Html.EditorFor(model => model.CrypticId, new { htmlAttributes = new { @class = "form-control crypticid", @onkeyup = "InputToUpper(this);" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.CrypticId, "", new { @class = "text-danger" })
                    </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Faction, htmlAttributes: new { @class = "control-label" })
                    @Html.EnumDropDownListFor(model => model.Faction, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Faction, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.MinimumLevel, htmlAttributes: new { @class = "control-label" })

                    @*Html.EditorFor(model => model.MinimumLevel, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.MinimumLevel, (SelectList)ViewBag.MinimumLevelSelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MinimumLevel, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label" })

                    @Html.EnumDropDownListFor(model => model.Length, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                </div>

@*
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Published, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.Published, (SelectList)ViewBag.PublishedSelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Published, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Spotlit, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.Spotlit, (SelectList)ViewBag.PublishedSelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Spotlit, "", new { @class = "text-danger" })
                </div>
*@
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", rows = "5", id = "missiondescription" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <h4>Gameplay Tags</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                Selected:
                <div class="list-group gameplay-tags" id="selected-tags">
                    @foreach (var tag in Model.Tags)
                    {
                        <a href="#" class="list-group-item gameplay-tag" value="@tag">@tag</a>
                        <input type="hidden" name="Tags[@counter]" value="@tag" class="tag-input"/> 
                        counter++;
                    }
                </div>
            </div>
            <div class="col-md-6">
                Available:
                <div class="list-group gameplay-tags" id="available-tags">
                    @foreach (var tag in ViewBag.AvailableTags)
                    {
                        <a href="#" class="list-group-item gameplay-tag" value="@tag">@tag</a>
                    }
                </div>
            </div>
        </div>



        <div class="container row">
            <div class="form-group">
                @*Set the buttons*@
                @{
                    if (Model.Status == FoundryMissionsCom.Models.FoundryMissionModels.Enums.MissionStatus.Unpublished)
                    {
                        <input type="submit" value="Submit" name="action:publishmission" class="btn btn-default" />
                        <input type="submit" value="Save" name="action:savemission"  class="btn btn-default"/>
                    }
                    else if (Model.Status != FoundryMissionsCom.Models.FoundryMissionModels.Enums.MissionStatus.Removed)
                    {
                        @* this is published/inreview *@
                        <input type="submit" value="Submit" name="action:publishmission"  class="btn btn-default"/>
                        <input type="submit" value="Withdraw" name="action:withdrawmission" class="btn btn-default"/>
                        if (!Model.AutoApprove && !User.IsInRole(FoundryMissionsCom.Helpers.ConstantsHelper.AdminRole))
                        {
                             <text>Resubmitting this mission will require a review by an Admin before being published.</text>
                        }
                    }
                    else
                    {
                        @* this is removed - only admins can see this.  Use the withdraw action to return it to unpublish *@
                        <input type="submit" value="Recover Mission" name="action:withdrawmission" class="btn btn-default"/>
                    }
                }
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/editmission")
}
